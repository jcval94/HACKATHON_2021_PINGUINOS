{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"P_Fisicas_Naturales","provenance":[],"collapsed_sections":[],"mount_file_id":"1d8N0R-pk-eQ1SNFtXxsRG-ByA-b-GH9D","authorship_tag":"ABX9TyNo2RDQsNlANl10FmAA5FeZ"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"e3CY32lXB5fX","colab":{"base_uri":"https://localhost:8080/","height":323},"executionInfo":{"status":"error","timestamp":1634924054984,"user_tz":300,"elapsed":1292,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}},"outputId":"6a149476-abe7-4b63-8757-d289113febe8"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":9,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server)\u001b[0m\n\u001b[1;32m    111\u001b[0m       \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtimeout_ms\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    112\u001b[0m       \u001b[0muse_metadata_server\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_metadata_server\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 113\u001b[0;31m       ephemeral=ephemeral)\n\u001b[0m\u001b[1;32m    114\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server, ephemeral)\u001b[0m\n\u001b[1;32m    303\u001b[0m       raise ValueError(\n\u001b[1;32m    304\u001b[0m           \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdomain_disabled_drivefs\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 305\u001b[0;31m           ': https://support.google.com/a/answer/7496409')\n\u001b[0m\u001b[1;32m    306\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mwrote_to_fifo\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    307\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfifo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'w'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfifo_file\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The domain policy has disabled Drive File Stream: https://support.google.com/a/answer/7496409"]}]},{"cell_type":"markdown","metadata":{"id":"gbxgmP_RC4xT"},"source":["#Librerías"]},{"cell_type":"code","metadata":{"id":"4qcIjNYgBzoS","executionInfo":{"status":"aborted","timestamp":1634924016049,"user_tz":300,"elapsed":60,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}}},"source":["import pandas as pd\n","import numpy as np"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"WgjnN7sACyz5","executionInfo":{"status":"aborted","timestamp":1634924016056,"user_tz":300,"elapsed":66,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}}},"source":["!pip install geopandas\n","!pip install alphashape\n","!pip install kneed\n","!pip install unidecode\n","\n","#Algoritmos de clasificación\n","from sklearn.cluster import DBSCAN\n","from sklearn.cluster import OPTICS\n","from sklearn.cluster import KMeans\n","\n","from sklearn import metrics\n","from sklearn.datasets import make_blobs\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.preprocessing import MinMaxScaler\n","from sklearn.neighbors import NearestNeighbors\n","import matplotlib.pyplot as plt\n","from geopy.distance import geodesic \n","\n","from scipy.spatial import distance_matrix\n","import mpl_toolkits\n","\n","# from mpl_toolkits.basemap import Basemap\n","import matplotlib.pyplot as plt\n","from pylab import rcParams\n","from branca.element import Template, MacroElement\n","\n","# De ley\n","import numpy as np\n","import pandas as pd\n","import random\n","import math\n","import collections\n","import time \n","import unidecode\n","\n","#Mapas\n","import alphashape\n","import folium\n","import geopandas as gpd\n","from geopy.distance import geodesic\n","\n","from shapely.geometry import Polygon\n","from folium.plugins import MarkerCluster\n","from urllib.parse import urlencode, urlparse, parse_qsl\n","import requests\n","from itertools import chain\n","from kneed import DataGenerator, KneeLocator\n","\n","#App deployment\n","# from pyngrok import ngrok\n","# import plotly.express as px\n","# from jupyter_dash import JupyterDash\n","# import dash_core_components as dcc\n","# import dash_html_components as html\n","# from dash.dependencies import Input, Output\n","import itertools\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"TKIO3OHlDhPv"},"source":["# Lectura"]},{"cell_type":"code","metadata":{"id":"-CQ_ZasQD5Id","executionInfo":{"status":"aborted","timestamp":1634924016061,"user_tz":300,"elapsed":71,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}}},"source":["HT_PATH = '/content/drive/MyDrive/Hackaton BBVA'\n","VR_PATH = '/content/drive/MyDrive/Reto Vinculación rentable'"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qlkjbUs6D89W","executionInfo":{"status":"aborted","timestamp":1634924016067,"user_tz":300,"elapsed":76,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}}},"source":["\n","tablas={}\n","for i in range(1,8):\n","  base = '/base 0'+str(i)+'_V3.csv'\n","  try:\n","    tablas[i] = pd.read_csv(VR_PATH+base, sep = '|')\n","  except:\n","    tablas[i] = pd.read_csv(VR_PATH+'/base 07_V3 (1).csv', sep = '|')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"edw8JlW_DinU","executionInfo":{"status":"aborted","timestamp":1634924016072,"user_tz":300,"elapsed":81,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}}},"source":["##Tabla Dummie"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TVNrt3AzDlLK","executionInfo":{"status":"aborted","timestamp":1634924016080,"user_tz":300,"elapsed":87,"user":{"displayName":"José Carlos Del Valle","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj19PshqP9uiswWAVAIXDvqOI5dWFpmtwd8YSu6=s64","userId":"12111023618923238183"}}},"source":["t_dumm = tablas[i]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"V-dZByPbC7ch"},"source":["# Funciones"]},{"cell_type":"markdown","metadata":{"id":"9Bt_0ZHuDDGc"},"source":["# Clustering"]},{"cell_type":"code","metadata":{"id":"O_AgpmfTCEfN"},"source":["def DB_plot(df__, dbs='dbs', mas_clusters = False):\n","\n","  X = df__[['latitud','longitud']]\n","\n","  nclustrs = 2\n","  ncl_kmedias = 3\n","  if len(X) <= 2:\n","    df__2 = df__.copy()\n","    df__2.iloc[:,2] += df__2.iloc[:,2]*.0000001\n","    df__ = pd.concat([df__,df__2])\n","    X = df__[['latitud','longitud']]\n","    nclustrs = 1\n","    \n","  if len(X) <= 4:\n","    ncl_kmedias = 1\n","\n","  neigh = NearestNeighbors(nclustrs)\n","  \n","  nbrs = neigh.fit(X)\n","  distances, indices = nbrs.kneighbors(X)\n","  try:\n","    distances = np.sort(distances, axis=0)[:,1]\n","    kneedle = KneeLocator(distances, range(len(distances)), S=1.0, curve=\"concave\", direction=\"increasing\")\n","    ksff = kneedle.knee*2\n","  except:\n","    ksff = 0.01\n","\n","  if ksff <= 0:\n","    ksff = 0.01\n","  # print('paso ksff')\n","####---Definir localización del mapa\n","  centro_ = centro(X)\n","  centros = centro_[0]\n","####---Definir localización del mapa\n","  # print('paso centro')\n","  if dbs == 'dbs':\n","    minsam = max(int(len(X)*.03),1)\n","    if mas_clusters:\n","      minsam = max(int(len(X)*.01),1)\n","    db = DBSCAN(eps=ksff, min_samples=minsam, metric='cityblock').fit(X)\n","\n","  elif dbs == 'km':\n","    # print('paso km')\n","    for nclus in range(min(ncl_kmedias, 3), min(12, len(X))):\n","      db = KMeans(init=\"k-means++\", n_clusters=nclus, n_init=4, random_state=324).fit(X)\n","      if (min(pd.Series(db.labels_).value_counts())<2 and ncl_kmedias > 1):\n","        db = KMeans(init=\"k-means++\", n_clusters=nclus-1, n_init=4, random_state=324).fit(X)\n","        break\n","  else:\n","    m_samp = max(int(len(X)*.04),1)\n","    if mas_clusters:\n","      m_samp = max(int(len(X)*.02),1)\n","    db = OPTICS(min_samples=m_samp, xi=.05, min_cluster_size=m_samp).fit(X)\n","  # print(dbs)\n","  labels = db.labels_\n","  # print('paso labels')\n","  # Number of clusters in labels, ignoring noise if present.\n","  n_clusters_ = len(set(labels)) - (1 if -1 in labels else 0)\n","  n_noise_ = list(labels).count(-1)\n","\n","  X['labels'] = labels\n","  if n_clusters_ <= 1 and not mas_clusters and ncl_kmedias > 1:\n","    # Volver a hacer el ejercicio con un menor nùmero de muestras en el cluster\n","    print('Dpl')\n","    return DB_plot(df__, dbs=dbs, mas_clusters = True)\n","  \n","  lab_dic = dict()\n","  if n_clusters_ != 0:\n","\n","    # colores = ['red', 'green', 'lightblue','purple', 'orange', 'lightgreen', 'black', 'darkgreen',\n","    #           'pink', 'lightred', 'beige', \"cyan\", \"lime\", \"firebrick\", \"darkgoldenrod\", \"white\"]\n","    colores = ['lightgray']*25\n","    i = 0\n","    \n","    for col in set(labels) - {-1}:\n","      lab_dic[col] = colores[i]\n","      i += 1\n","  else:\n","    labels = [-1]*len(db.labels_)\n","    n_clusters_ = 1\n","\n","  lab_dic[-1] = 'gray'\n","\n","  # rcParams['figure.figsize'] = (9,4)\n","  \n","  map = folium.Map(location=centros, tiles='OpenStreetMap', zoom_start=13)\n","  # marker_cluster = MarkerCluster().add_to(map)\n","  locationlist = X.values.tolist()\n","\n","  leyenda_dc = X.groupby('labels').count().drop('latitud', axis = 1)\n","  leyenda_dc['color'] = [lab_dic[x] for x in leyenda_dc.index]\n","  \n","  df__['labels'] = labels\n","  df__['Competencia'] = [x if x == 'BBVA' else 'competencia' for x in df__.banco]\n","  compe = pd.pivot_table(df__[['Competencia','labels']].reset_index(), index = 'labels',\n","                         columns='Competencia',aggfunc='count').fillna(0)\n","  \n","  if len(compe.columns)==1:\n","    compe['BBVA'] = [0]*len(compe)\n","  dsa = pd.concat([leyenda_dc, compe], axis = 1)\n","  dsa_i = dsa.index\n","  dsa = dsa.values\n","  # print(dsa)\n","  rule = [akj[2]/(akj[2]+akj[3]) for akj in dsa]\n","\n","  a_ = [x for _, x in sorted(zip(rule, dsa_i)) if x!=-1]\n","  cl_ = []\n","####------------Colocar ATMs en el mapa\n","  df__TX = [x if str(x) != 'nan' else '' for x in df__.TX]\n","  df__tr_real = [x if ~np.isnan(x) else 0 for x in df__.TRANSACCIONALIDAD]\n","  log_val = [np.log(x) if ~np.isnan(x) else 0 for x in df__.TRANSACCIONALIDAD]\n","  log_val_ = pd.Series(log_val)\n","  lgg_ln = log_val_[log_val_>0]\n","  if len(lgg_ln)>0:\n","    mrqu = np.percentile(lgg_ln,10)\n","  else:\n","    mrqu = 0\n","\n","  medida = [x/mrqu+10 if x < mrqu else (x-mrqu)*2+10 for x in log_val]\n","  vmmax = max(medida)\n","  medida_col = [blue(x/vmmax) for x in medida]\n","  \n","  for point, banco, a_id, cluster, score_tx, tx_val, mmcol, NTX in zip(range(len(locationlist)), df__.banco,df__.id,\n","                                      labels, df__TX, medida, medida_col, df__tr_real):\n","    coloc_new=False\n","\n","    color_1 = ''\n","    col_fill = 'red'#lab_dic[cluster]\n","    if banco == 'BBVA':\n","      color_1 = mmcol\n","      col_fill = 'grey'\n","\n","    if ('BEYG' in a_id) or ('Comercial' in a_id):\n","      coloc_new=True\n","      \n","    if cluster != -1 and cluster not in cl_:\n","      X__ = X[X.labels == cluster]\n","      # print(len(X__))\n","      if len(X__) == 0:\n","         continue\n","      if len(X__) < 3:\n","        hull_pts = [(min(X__.latitud), max(X__.latitud), max(X__.latitud), min(X__.latitud)),\n","                    (min(X__.longitud), min(X__.longitud), max(X__.longitud), max(X__.longitud))]\n","      else:\n","        try:\n","          valores = X__[['latitud', 'longitud']].values\n","          hull_pts = alphashape.alphashape(valores, 0.1).exterior.coords.xy\n","        except:\n","          hull_pts = [(min(X__.latitud), max(X__.latitud), max(X__.latitud), min(X__.latitud)),\n","                    (min(X__.longitud), min(X__.longitud), max(X__.longitud), max(X__.longitud))]\n","#####----------------Visualizar bordes\n","      #pp = gpd.GeoDataFrame(index=[0], crs={'init': 'epsg:4326'}, geometry=[Polygon(zip(hull_pts[1], hull_pts[0]))])\n","      #folium.GeoJson(pp, style_function=lambda x: {'fillColor': 'darkgray', 'color': 'gray'}).add_to(map)\n","#####----------------Fin Visualizar bordes\n","    cl_.append(cluster)\n","    NTX = \"{:,}\".format(int(NTX/3))\n","    \n","    if coloc_new:\n","      folium.Marker(locationlist[point], popup=\"ATM \"+banco+\", \" + score_tx+', '+str(NTX),\n","          icon=folium.Icon(color='green', icon_color='white', prefix='fa', icon=\"credit-card\")\n","          ).add_to(map)\n","    else:\n","      folium.CircleMarker(\n","        location=locationlist[point],\n","        radius=tx_val,\n","        popup=\"ATM \"+banco+\", \" + score_tx+', '+str(NTX),\n","        color=color_1,\n","        fill=True,\n","        fill_color=col_fill,\n","      ).add_to(map)\n","    \n","    \n","####------------Fin Colocar ATMs en el mapa\n","####------------Agregar Leyenda\n","  repre = dsa\n","  # print('DSA: ', dsa)\n","  # template = leyenda_f(dsa)\n","  # macro = MacroElement()\n","  # macro._template = Template(template)\n","  # map.get_root().add_child(macro)\n","####------------Fin Agregar Leyenda\n","####-----------Arreglar nombres de columnas\n","  nb = []\n","  for nombre in compe.columns:\n","    for a in list(nombre):\n","      if not (a in ['index','']):\n","        nb.append(a)\n","  compe.columns = nb\n","  \n","  leyenda_dc.columns = ['atms_t',\t'color']\n","####-----------Fin Arreglar nombres de columnas\n","\n","  aa = pd.concat([leyenda_dc,compe],axis = 1)\n","  # return(df__, a_, aa, leyenda_dc,compe)\n","  df__= df__.merge(aa.reset_index(),on = 'labels')\n","\n","  return map, df__, a_, centros, repre\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3vbdK_E5CuOV"},"source":[""],"execution_count":null,"outputs":[]}]}